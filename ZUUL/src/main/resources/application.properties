server.port=8080
spring.application.name=ZUUL

eureka.instance.hostname= ${spring.application.name}
eureka.instance.prefer-ip-address=true
#spring.cloud.inetutils.preferred-networks= - 10.178
#spring.cloud.inetutils.ignored-interfaces= - br-d470ad05f775
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#eureka.client.service-url.defaultZone = http://localhost:8080/EUREKA/eureka/
eureka.client.service-url.defaultZone = http://eureka-server-01:8080/EUREKA/eureka/
# 프로퍼티에 등록된 서비스를 제외하고 다 무시
#zuul.ignored-services="*"

# header에서 민감하게 생각되어지는 값들 (블랙리스트)
zuul.sensitive-headers= Set-Cookie,Authorization

zuul.routes.CUST.path =/CUST/**
#zuul.routes.CUST.service-id=CUST
# strip-prefix true일 경우 path매칭 부분은 빼고 뒤에 ** 부분만 보냄
zuul.routes.CUST.strip-prefix=false

zuul.routes.CMS.path =/CMS/**
#zuul.routes.CMS.service-id=CMS
zuul.routes.CMS.strip-prefix=false

zuul.routes.LOG.path =/LOG/**
#zuul.routes.LOG.service-id=LOG
zuul.routes.LOG.strip-prefix=false

zuul.ribbon-isolation-strategy=thread

ribbon.eureka.enabled=true
# ribbon 서버리스트 Refresh 갱신 주기
ribbon.ServerListRefreshInterval=10000

hystrix.threadpool.default.coreSize =150
hystrix.threadpool.default.maximumSize =150

############################################################
#(ribbon.ConnectTimeout + ribbon.ReadTimeout) * (ribbon.MaxAutoRetries + 1) * (ribbon.MaxAutoRetriesNextServer + 1)
# HttpClient의 Connection timeout(연결과정의 Timeout 시간)
ribbon.ConnectTimeout=5000
# HttpClient의 Read Timeout(데이터를 읽어오는 과정의 Timeout 시간)
ribbon.ReadTimeout=5000
# 첫 시도 실패시 같은 서버로 재시도 하는 수(첫번째 전송은 제외)
ribbon.MaxAutoRetries=1
# 첫 시도 실패시 다음 서버로 재시도 하는 수(첫번째 전송은 제외)
ribbon.MaxAutoRetriesNextServer=1
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:40000